@model MeLink.Web.ViewModels.CreateOrderViewModel

@{
    ViewData["Title"] = "Create Order";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <h2 class="mb-4 text-center text-primary">
                <i class="fas fa-shopping-bag me-2"></i>
                Create New Order
            </h2>

            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Order Details</h5>
                </div>
                <div class="card-body">
                    <form asp-action="ConfirmOrder" method="post" enctype="multipart/form-data" id="orderForm">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="card border-primary">
                                    <div class="card-header bg-light">
                                        <h6 class="mb-0"><i class="fas fa-user text-primary"></i> Your Information</h6>
                                    </div>
                                    <div class="card-body">
                                        <p><strong>Name:</strong> @Model.FromUserName</p>
                                        <input type="hidden" asp-for="FromUserId" />
                                        <input type="hidden" asp-for="FromUserName" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card border-info">
                                    <div class="card-header bg-light">
                                        <h6 class="mb-0"><i class="fas fa-truck text-info"></i> Source Information</h6>
                                    </div>
                                    <div class="card-body">
                                        <p><strong>Source:</strong> <span id="selected-source">Not Selected</span></p>
                                        <input type="hidden" asp-for="PharmacyId" id="source-id" />
                                        <input type="hidden" asp-for="PharmacyName" id="source-name" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-4">
                            <div class="card-header bg-success text-white">
                                <h6 class="mb-0"><i class="fas fa-search me-1"></i> Search & Add Medicines</h6>
                            </div>
                            <div class="card-body">
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" id="medicine-search" placeholder="Search for medicines by name or ingredient...">
                                    <button type="button" class="btn btn-success" onclick="searchMedicines()">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                                <div id="search-results-container" class="mt-3">
                                </div>
                            </div>
                        </div>

                        <div class="card mb-4">
                            <div class="card-header bg-warning text-dark">
                                <h6 class="mb-0"><i class="fas fa-list-ul me-1"></i> Selected Medicines</h6>
                            </div>
                            <div class="card-body" id="selected-items-container">
                            </div>
                        </div>

                        @if (Model.IsPatient)
                        {
                            <div class="card mb-4">
                                <div class="card-header bg-secondary text-white">
                                    <h6 class="mb-0"><i class="fas fa-file-medical me-1"></i> Prescription (Optional)</h6>
                                </div>
                                <div class="card-body">
                                    <input asp-for="PrescriptionFile" class="form-control" type="file" accept="image/*,.pdf" />
                                    <small class="form-text text-muted">You can upload an image or PDF file of your prescription</small>
                                </div>
                            </div>
                        }

                        <div class="card mb-4">
                            <div class="card-header bg-secondary text-white">
                                <h6 class="mb-0"><i class="fas fa-sticky-note me-1"></i> Additional Notes</h6>
                            </div>
                            <div class="card-body">
                                <textarea asp-for="Notes" class="form-control" rows="3" placeholder="Any special instructions..."></textarea>
                            </div>
                        </div>

                        <div id="hidden-order-items"></div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-success btn-lg" id="submit-btn" disabled>
                                <i class="fas fa-check me-1"></i> Confirm Order
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        let selectedItems = [];
        let currentSourceId = null;
        let currentSourceName = null;
        let currentUserId = '@Model.CurrentUserId';

        // Search for medicines
        async function searchMedicines() {
            const searchTerm = document.getElementById('medicine-search').value.trim();
            if (!searchTerm) {
                displayMessage('Please enter a search term', 'warning');
                return;
            }

            try {
                const response = await fetch(`/Order/SearchMedicines?term=${encodeURIComponent(searchTerm)}&forUserId=${currentUserId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const medicines = await response.json();
                displaySearchResults(medicines);
            } catch (error) {
                displayMessage('Error searching for medicines', 'danger');
                console.error('Search error:', error);
            }
        }

        // Display search results
        function displaySearchResults(medicines) {
            const container = document.getElementById('search-results-container');
            if (medicines.length === 0) {
                container.innerHTML = `<div class="alert alert-warning text-center">No medicines found.</div>`;
                return;
            }

            let html = `
                <div class="table-responsive">
                    <table class="table table-striped table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Medicine</th>
                                <th>Source</th>
                                <th>Price</th>
                                <th>Stock</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
            `;
            medicines.forEach(med => {
                html += `
                    <tr>
                        <td><strong>${med.medicineName}</strong>${med.brandName ? `<br><small class="text-muted">(${med.brandName})</small>` : ''}</td>
                        <td>${med.sourceName}</td>
                        <td>$${med.price.toFixed(2)}</td>
                        <td>${med.stock} units</td>
                        <td>
                            <div class="input-group input-group-sm">
                                <input type="number" class="form-control text-center" value="1" min="1" max="${med.stock}" id="qty-${med.inventoryId}">
                                <button class="btn btn-outline-primary" type="button"
                                        onclick="addMedicineToCart(${med.inventoryId}, '${med.medicineName}', '${med.brandName || ''}', '${med.sourceId}', '${med.sourceName}', ${med.price})">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            });
            html += `</tbody></table></div>`;
            container.innerHTML = html;
        }

        // Add medicine to cart
        function addMedicineToCart(inventoryId, medicineName, brandName, sourceId, sourceName, price) {
            const quantity = parseInt(document.getElementById(`qty-${inventoryId}`).value);

            if (currentSourceId && currentSourceId !== sourceId) {
                if (!confirm('You can only order from one source at a time. Do you want to clear your current selection?')) {
                    return;
                }
                clearSelectedItems();
            }

            if (!currentSourceId) {
                currentSourceId = sourceId;
                currentSourceName = sourceName;
                document.getElementById('selected-source').textContent = currentSourceName;
                document.getElementById('source-id').value = currentSourceId;
                document.getElementById('source-name').value = currentSourceName;
            }

            const existingItem = selectedItems.find(item => item.inventoryId === inventoryId);
            if (existingItem) {
                existingItem.quantity += quantity;
            } else {
                selectedItems.push({ inventoryId, medicineName, brandName, price, quantity });
            }

            updateSelectedItemsDisplay();
            displayMessage('Medicine added successfully', 'success');
        }

        // Update selected items display and hidden form fields
        function updateSelectedItemsDisplay() {
            const container = document.getElementById('selected-items-container');
            const hiddenContainer = document.getElementById('hidden-order-items');
            const submitBtn = document.getElementById('submit-btn');

            if (selectedItems.length === 0) {
                container.innerHTML = `<div class="alert alert-info text-center" role="alert"><i class="fas fa-info-circle me-1"></i> No medicines selected yet.</div>`;
                hiddenContainer.innerHTML = '';
                submitBtn.disabled = true;
                return;
            }

            let total = 0;
            let html = '<div class="table-responsive"><table class="table table-bordered mb-0"><thead class="table-light"><tr><th>Medicine</th><th>Quantity</th><th>Unit Price</th><th>Total</th><th>Action</th></tr></thead><tbody>';
            let hiddenHtml = '';

            selectedItems.forEach((item, index) => {
                const itemTotal = item.price * item.quantity;
                total += itemTotal;
                html += `
                    <tr>
                        <td><strong>${item.medicineName}</strong>${item.brandName ? `<br><small class="text-muted">(${item.brandName})</small>` : ''}</td>
                        <td class="text-center">
                            <input type="number" class="form-control form-control-sm text-center" value="${item.quantity}" min="1" onchange="updateItemQuantity(${index}, this.value)">
                        </td>
                        <td class="text-center">$${item.price.toFixed(2)}</td>
                        <td class="text-center"><strong>$${itemTotal.toFixed(2)}</strong></td>
                        <td class="text-center">
                            <button type="button" class="btn btn-sm btn-danger" onclick="removeItem(${index})"><i class="fas fa-trash-alt"></i></button>
                        </td>
                    </tr>
                `;
                hiddenHtml += `
                    <input type="hidden" name="OrderItems[${index}].InventoryId" value="${item.inventoryId}">
                    <input type="hidden" name="OrderItems[${index}].MedicineName" value="${item.medicineName}">
                    <input type="hidden" name="OrderItems[${index}].BrandName" value="${item.brandName || ''}">
                    <input type="hidden" name="OrderItems[${index}].UnitPrice" value="${item.price}">
                    <input type="hidden" name="OrderItems[${index}].Quantity" value="${item.quantity}">
                `;
            });
            html += `</tbody><tfoot><tr class="table-success"><th colspan="3" class="text-end">Total Amount:</th><th class="text-center">$${total.toFixed(2)}</th><th></th></tr></tfoot></table></div>`;
            container.innerHTML = html;
            hiddenContainer.innerHTML = hiddenHtml;
            submitBtn.disabled = false;
        }

        function updateItemQuantity(index, newQuantity) {
            selectedItems[index].quantity = parseInt(newQuantity);
            updateSelectedItemsDisplay();
        }

        function removeItem(index) {
            selectedItems.splice(index, 1);
            if (selectedItems.length === 0) {
                currentSourceId = null;
                currentSourceName = null;
                document.getElementById('selected-source').textContent = 'Not Selected';
                document.getElementById('source-id').value = '';
                document.getElementById('source-name').value = '';
            }
            updateSelectedItemsDisplay();
        }

        function displayMessage(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button>`;
            document.body.appendChild(alertDiv);
            setTimeout(() => { if (alertDiv.parentNode) alertDiv.parentNode.removeChild(alertDiv); }, 3000);
        }

        document.getElementById('medicine-search').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                searchMedicines();
            }
        });
    </script>
}