@model MeLink.Web.ViewModels.CreateOrderViewModel

@{
    ViewData["Title"] = "Create Order";
}

<div class="container py-5">
    <div class="card shadow-lg border-0 rounded-4">
        <div class="card-body p-md-5">
            <div class="text-center mb-5">
                <div class="icon-circle bg-primary-subtle text-primary mx-auto mb-3">
                    <i class="fas fa-shopping-bag fa-2x"></i>
                </div>
                <h2 class="display-6 fw-bold text-dark">Create New Order</h2>
                <p class="text-muted lead-sm">Fill in the details below to create your order easily.</p>
            </div>

            <form asp-action="ConfirmOrder" method="post" enctype="multipart/form-data" id="orderForm">
                <div asp-validation-summary="ModelOnly" class="text-danger mb-4 p-3 rounded-3 bg-danger-subtle"></div>

                <div class="row g-4 mb-5">
                    <div class="col-md-6">
                        <div class="card h-100 border-primary rounded-4">
                            <div class="card-header bg-primary-subtle border-0 rounded-top-4">
                                <h6 class="mb-0 fw-bold"><i class="fas fa-user text-primary me-2"></i> Your Information</h6>
                            </div>
                            <div class="card-body">
                                <p class="mb-0">
                                    <strong class="text-dark">Name:</strong> @Model.FromUserName
                                </p>
                                <input type="hidden" asp-for="FromUserId" />
                                <input type="hidden" asp-for="FromUserName" />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100 border-info rounded-4">
                            <div class="card-header bg-info-subtle border-0 rounded-top-4">
                                <h6 class="mb-0 fw-bold"><i class="fas fa-truck text-info me-2"></i> Source Information</h6>
                            </div>
                            <div class="card-body">
                                <p class="mb-0">
                                    <strong class="text-dark">Source:</strong> <span id="selected-source" class="fw-semibold">Not Selected</span>
                                </p>
                                <input type="hidden" asp-for="PharmacyId" id="source-id" />
                                <input type="hidden" asp-for="PharmacyName" id="source-name" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card mb-5 border-0 rounded-4 shadow-sm">
                    <div class="card-header bg-success text-white border-0 rounded-top-4">
                        <h5 class="mb-0"><i class="fas fa-search me-2"></i> Search & Add Medicines</h5>
                    </div>
                    <div class="card-body p-4">
                        <div class="input-group input-group-lg">
                            <span class="input-group-text bg-light border-end-0 text-muted rounded-start-3"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control border-start-0" id="medicine-search" placeholder="Search for medicines by name or ingredient...">
                            <button type="button" class="btn btn-success px-4" onclick="searchMedicines()">Search</button>
                        </div>
                        <div id="search-results-container" class="mt-4">
                        </div>
                    </div>
                </div>

                <div class="card mb-5 border-0 rounded-4 shadow-sm">
                    <div class="card-header bg-primary text-white border-0 rounded-top-4">
                        <h5 class="mb-0"><i class="fas fa-list-ul me-2"></i> Selected Medicines</h5>
                    </div>
                    <div class="card-body p-4" id="selected-items-container">
                        <div class="alert alert-info text-center rounded-3 p-4">
                            <h5 class="alert-heading"><i class="fas fa-info-circle me-2"></i> No medicines selected yet.</h5>
                            <p class="mb-0">Use the search bar above to find and add medicines to your order.</p>
                        </div>
                    </div>
                </div>

                <div class="card mb-5 border-0 rounded-4 shadow-sm">
                    <div class="card-header bg-secondary text-white border-0 rounded-top-4">
                        <h5 class="mb-0"><i class="fas fa-file-medical me-2"></i> Additional Details</h5>
                    </div>
                    <div class="card-body p-4">
                        @if (Model.IsPatient)
                        {
                            <div class="mb-4">
                                <label for="PrescriptionFile" class="form-label fw-semibold">Upload Prescription (Optional)</label>
                                <input asp-for="PrescriptionFile" class="form-control" type="file" accept="image/*,.pdf" />
                                <div class="form-text text-muted">You can upload an image or PDF file of your prescription.</div>
                            </div>
                        }
                        <div>
                            <label for="Notes" class="form-label fw-semibold">Additional Notes</label>
                            <textarea asp-for="Notes" class="form-control" rows="4" placeholder="Any special instructions or delivery details..."></textarea>
                        </div>
                    </div>
                </div>

                <div id="hidden-order-items"></div>

                <div class="text-center mt-5">
                    <button type="submit" class="btn btn-success btn-lg px-5 py-3 rounded-pill" id="submit-btn" disabled>
                        <i class="fas fa-check me-2"></i> Confirm Order
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        let selectedItems = [];
        let currentSourceId = null;
        let currentSourceName = null;
        let currentUserId = '@Model.CurrentUserId';

        async function searchMedicines() {
            const searchTerm = document.getElementById('medicine-search').value.trim();
            if (!searchTerm) {
                displayMessage('Please enter a search term', 'warning');
                return;
            }

            try {
                const response = await fetch(`/Order/SearchMedicines?term=${encodeURIComponent(searchTerm)}&forUserId=${currentUserId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const medicines = await response.json();
                displaySearchResults(medicines);
            } catch (error) {
                displayMessage('Error searching for medicines', 'danger');
                console.error('Search error:', error);
            }
        }

        function displaySearchResults(medicines) {
            const container = document.getElementById('search-results-container');
            if (medicines.length === 0) {
                container.innerHTML = `<div class="alert alert-warning text-center rounded-3 p-3">No medicines found.</div>`;
                return;
            }

            let html = `
                <div class="table-responsive rounded-3 border">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="bg-light">
                            <tr>
                                <th scope="col">Medicine</th>
                                <th scope="col">Source</th>
                                <th scope="col">Price</th>
                                <th scope="col">Stock</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>
            `;
            medicines.forEach(med => {
                html += `
                    <tr>
                        <td>
                            <div class="fw-bold">${med.medicineName}</div>
                            ${med.brandName ? `<div class="text-muted small">(${med.brandName})</div>` : ''}
                        </td>
                        <td>${med.sourceName}</td>
                        <td><span class="badge bg-success-subtle text-success fs-6 fw-normal">$${med.price.toFixed(2)}</span></td>
                        <td><span class="badge bg-info-subtle text-info fs-6 fw-normal">${med.stock} units</span></td>
                        <td>
                            <div class="input-group input-group-sm">
                                <input type="number" class="form-control text-center" value="1" min="1" max="${med.stock}" id="qty-${med.inventoryId}">
                                <button class="btn btn-primary" type="button"
                                        onclick="addMedicineToCart(${med.inventoryId}, '${med.medicineName}', '${med.brandName || ''}', '${med.sourceId}', '${med.sourceName}', ${med.price})">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            });
            html += `</tbody></table></div>`;
            container.innerHTML = html;
        }

        function addMedicineToCart(inventoryId, medicineName, brandName, sourceId, sourceName, price) {
            const quantity = parseInt(document.getElementById(`qty-${inventoryId}`).value);

            if (currentSourceId && currentSourceId !== sourceId) {
                if (!confirm('You can only order from one source at a time. Do you want to clear your current selection?')) {
                    return;
                }
                clearSelectedItems();
            }

            if (!currentSourceId) {
                currentSourceId = sourceId;
                currentSourceName = sourceName;
                document.getElementById('selected-source').textContent = currentSourceName;
                document.getElementById('source-id').value = currentSourceId;
                document.getElementById('source-name').value = currentSourceName;
            }

            const existingItem = selectedItems.find(item => item.inventoryId === inventoryId);
            if (existingItem) {
                existingItem.quantity += quantity;
            } else {
                selectedItems.push({ inventoryId, medicineName, brandName, price, quantity });
            }

            updateSelectedItemsDisplay();
            displayMessage('Medicine added successfully', 'success');
        }

        function updateSelectedItemsDisplay() {
            const container = document.getElementById('selected-items-container');
            const hiddenContainer = document.getElementById('hidden-order-items');
            const submitBtn = document.getElementById('submit-btn');

            if (selectedItems.length === 0) {
                container.innerHTML = `
                    <div class="alert alert-info text-center rounded-3 p-4">
                        <h5 class="alert-heading"><i class="fas fa-info-circle me-2"></i> No medicines selected yet.</h5>
                        <p class="mb-0">Use the search bar above to find and add medicines to your order.</p>
                    </div>
                `;
                hiddenContainer.innerHTML = '';
                submitBtn.disabled = true;
                return;
            }

            let total = 0;
            let html = '<div class="table-responsive rounded-3 border"><table class="table table-hover align-middle mb-0"><thead class="bg-light"><tr><th scope="col">Medicine</th><th scope="col">Quantity</th><th scope="col">Unit Price</th><th scope="col">Total</th><th scope="col">Action</th></tr></thead><tbody>';
            let hiddenHtml = '';

            selectedItems.forEach((item, index) => {
                const itemTotal = item.price * item.quantity;
                total += itemTotal;
                html += `
                    <tr>
                        <td>
                            <div class="fw-bold">${item.medicineName}</div>
                            ${item.brandName ? `<div class="text-muted small">(${item.brandName})</div>` : ''}
                        </td>
                        <td style="width: 15%;">
                            <input type="number" class="form-control form-control-sm text-center" value="${item.quantity}" min="1" onchange="updateItemQuantity(${index}, this.value)">
                        </td>
                        <td><span class="badge bg-success-subtle text-success fs-6 fw-normal">$${item.price.toFixed(2)}</span></td>
                        <td><span class="fw-bold">$${itemTotal.toFixed(2)}</span></td>
                        <td>
                            <button type="button" class="btn btn-sm btn-danger" onclick="removeItem(${index})"><i class="fas fa-trash-alt"></i></button>
                        </td>
                    </tr>
                `;
                hiddenHtml += `
                    <input type="hidden" name="OrderItems[${index}].InventoryId" value="${item.inventoryId}">
                    <input type="hidden" name="OrderItems[${index}].MedicineName" value="${item.medicineName}">
                    <input type="hidden" name="OrderItems[${index}].BrandName" value="${item.brandName || ''}">
                    <input type="hidden" name="OrderItems[${index}].UnitPrice" value="${item.price}">
                    <input type="hidden" name="OrderItems[${index}].Quantity" value="${item.quantity}">
                `;
            });
            html += `
                        </tbody>
                        <tfoot>
                            <tr class="table-success">
                                <th colspan="3" class="text-end">Total Amount:</th>
                                <th colspan="2" class="fs-5 text-success">$${total.toFixed(2)}</th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            `;
            container.innerHTML = html;
            hiddenContainer.innerHTML = hiddenHtml;
            submitBtn.disabled = false;
        }

        function updateItemQuantity(index, newQuantity) {
            selectedItems[index].quantity = parseInt(newQuantity);
            updateSelectedItemsDisplay();
        }

        function removeItem(index) {
            selectedItems.splice(index, 1);
            if (selectedItems.length === 0) {
                currentSourceId = null;
                currentSourceName = null;
                document.getElementById('selected-source').textContent = 'Not Selected';
                document.getElementById('source-id').value = '';
                document.getElementById('source-name').value = '';
            }
            updateSelectedItemsDisplay();
        }

        function clearSelectedItems() {
            selectedItems = [];
            currentSourceId = null;
            currentSourceName = null;
            document.getElementById('selected-source').textContent = 'Not Selected';
            document.getElementById('source-id').value = '';
            document.getElementById('source-name').value = '';
            updateSelectedItemsDisplay();
        }

        function displayMessage(message, type) {
            const alertPlaceholder = document.querySelector('.container');
            const wrapper = document.createElement('div');
            wrapper.innerHTML = [
                `<div class="alert alert-${type} alert-dismissible fade show" role="alert">`,
                `   <div>${message}</div>`,
                '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
                '</div>'
            ].join('');

            alertPlaceholder.prepend(wrapper);

            setTimeout(() => {
                const alert = new bootstrap.Alert(wrapper.querySelector('.alert'));
                alert.close();
            }, 3000);
        }

        document.getElementById('medicine-search').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                searchMedicines();
            }
        });

        document.addEventListener('DOMContentLoaded', updateSelectedItemsDisplay);
    </script>

    <style>
        .card {
            border: none;
        }

        .rounded-4 {
            border-radius: 1.5rem !important;
        }

        .rounded-top-4 {
            border-top-left-radius: 1.5rem !important;
            border-top-right-radius: 1.5rem !important;
        }

        .shadow-lg {
            box-shadow: 0 1rem 3rem rgba(0,0,0,.175) !important;
        }

        .shadow-sm {
            box-shadow: 0 .125rem .25rem rgba(0,0,0,.075) !important;
        }

        .icon-circle {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .lead-sm {
            font-size: 1.15rem;
        }

        .bg-primary-subtle {
            background-color: #e0f2fe !important;
        }

        .bg-info-subtle {
            background-color: #cff4fc !important;
        }

        .bg-success-subtle {
            background-color: #d1e7dd !important;
        }

        .bg-danger-subtle {
            background-color: #f8d7da !important;
        }

        .input-group-text {
            border-radius: .75rem 0 0 .75rem !important;
        }

        .form-control {
            border-radius: 0 .75rem .75rem 0 !important;
        }

            .form-control:focus {
                box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25) !important;
            }

            .form-control.rounded-3, textarea.form-control {
                border-radius: .75rem !important;
            }

        .btn {
            border-radius: .75rem;
        }

        .rounded-pill {
            border-radius: 50rem !important;
        }

        .table-responsive {
            border-radius: 1rem;
            overflow: hidden;
        }

        .table-hover tbody tr:hover {
            background-color: #f1f7fe;
        }

        .table thead th {
            font-weight: 600;
            color: #495057;
            text-transform: uppercase;
        }
    </style>
}