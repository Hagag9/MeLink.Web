@model MeLink.Web.ViewModels.OrderSearchViewModel
@{
    ViewData["Title"] = "Order Medicines";
    Layout = "_Layout";
}

<script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />


<div class="offcanvas offcanvas-end" tabindex="-1" id="shoppingCartOffcanvas" aria-labelledby="shoppingCartOffcanvasLabel">
    <div class="cart-elegant-header">
        <h5 class="fw-bold" id="shoppingCartOffcanvasLabel">MY SHOPPING CART</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="cart-elegant-body" id="offcanvas-cart-items">
        <div class="text-center empty-cart-message"><p>Your cart is currently empty.</p></div>
    </div>
    <div class="cart-elegant-footer" id="offcanvas-cart-footer" style="display: none;">
        <div class="subtotal-row">
            <span>Cart Subtotal</span>
            <span id="offcanvas-cart-total">0.00 EGP</span>
        </div>
        <a href="#" class="view-cart-link">VIEW AND EDIT CART</a>
        <button class="checkout-btn-elegant" onclick="proceedToOrder()">GO TO CHECKOUT</button>
        <button class="clear-cart-btn-elegant" onclick="clearCart()">Clear Cart</button>
    </div>
</div>

<button class="shadow-lg floating-cart-btn d-none" type="button" id="floating-cart-button" data-bs-toggle="offcanvas" data-bs-target="#shoppingCartOffcanvas">
    <i class="fas fa-shopping-cart fa-lg"></i>
    <span id="cart-item-count" class="badge rounded-pill bg-danger">0</span>
</button>

<div class="modal fade" id="orderModal" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content border-0 shadow" style="border-radius: 0.5rem;">
            <div class="modal-header bg-dark text-white" style="border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;">
                <h5 class="modal-title">Order Confirmation</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="orderForm" asp-action="ConfirmOrder" method="post" enctype="multipart/form-data">
                <div class="modal-body p-4 bg-light-subtle border rounded-4 p-4">
                    <div id="order-summary" class="mb-3"></div>
                    <div class="row g-4 align-items-center">
                        @if (ViewBag.IsPatient)
                        {
                            <div class="col-md-6">
                                <label for="prescriptionUpload2" class="form-label fw-semibold">
                                    <i class="fas fa-prescription me-2 text-primary"></i>Upload Prescription <span class="text-muted small">(Optional)</span>
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-upload"></i></span>
                                    <input type="file" class="form-control" name="PrescriptionFile" id="prescriptionUpload2" accept="image/*,.pdf">
                                </div>
                            </div>
                        }
                        <div class="col-md-6">
                            <div class="form-floating">
                                <textarea class="form-control" name="Notes" placeholder="Leave a note here" id="floatingTextarea" style="height: 100px"></textarea>
                                <label for="floatingTextarea"><i class="fas fa-sticky-note me-2"></i>Additional Notes</label>
                            </div>
                        </div>
                    </div>
                    <input type="hidden" name="PatientId" value="">
                    <input type="hidden" name="PharmacyId" id="pharmacy-id">
                    <input type="hidden" name="PharmacyName" id="pharmacy-name">
                    <div id="hidden-items"></div>
                </div>
                <div class="modal-footer bg-light" style="border-bottom-left-radius: 0.5rem; border-bottom-right-radius: 0.5rem;">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary btn-sm px-4">Confirm & Place Order</button>
                </div>
            </form>
        </div>
    </div>
</div>


<div class="bg-gray-100 p-4 md:p-8">
    <div class="container mx-auto">
        <div class="flex justify-between items-center mb-6"><h1 class="text-4xl font-bold text-gray-800">Medicine</h1></div>
        <div class="mb-6">
            <form asp-controller="Order" asp-action="@(string.IsNullOrEmpty(Model.SupplierId) || ViewBag.IsPatient ? "Index" : "BrowseMedicines")" method="get" class="flex items-center gap-4">
                @if (!string.IsNullOrEmpty(Model.SupplierId))
                {
                    <input type="hidden" name="supplierId" value="@Model.SupplierId" />
                }
                <div class="relative flex-grow">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"><i class="fas fa-search text-gray-400"></i></div>
                    <input type="text" name="searchTerm" value="@Model.SearchTerm" class="w-full border border-gray-300 rounded-md py-3 pl-10 pr-4 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Search for products...">
                </div>
                <button type="submit" class="bg-blue-600 text-white px-8 py-3 rounded-md hover:bg-blue-700 whitespace-nowrap">Search</button>
            </form>
        </div>
        @if (Model.AvailableMedicines.Any())
        {
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="w-full">
                       
                        <tbody class="divide-y divide-gray-200" id="medicines-table-body">
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="flex justify-between items-center mt-6">
                <div class="flex items-center space-x-2">
                    <button class="bg-gray-800 text-white px-6 py-2 rounded-md hover:bg-gray-700 text-sm" onclick="addSelectedToCart()">Add Selected to Cart</button>
                   
                </div>
                <nav id="pagination-container"></nav>
            </div>
        }
        else
        {
            <div class="bg-white rounded-lg shadow-md p-8 text-center"><h5 class="font-bold text-xl text-gray-700">No Results Found</h5></div>
        }
    </div>
</div>



@section Scripts
{
    <style>
        :root {
            --system-font: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }

        .floating-cart-btn {
            position: fixed !important;
            bottom: 25px !important;
            right: 25px !important;
            width: 60px !important;
            height: 60px !important;
            border-radius: 50% !important;
            z-index: 1050 !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            font-size: 1.2rem !important;
            background-color: #212529 !important;
            color: white !important;
        }

            .floating-cart-btn .badge {
                position: absolute;
                top: -5px;
                right: -5px;
            }

        /* Final Elegant Cart Styles */
        .offcanvas-end {
            display: flex;
            flex-direction: column;
            font-family: var(--system-font);
        }

        .cart-elegant-header {
            text-transform: uppercase;
            letter-spacing: 1px;
            flex-shrink: 0;
            background-color: #2d3748;
            color: #fff;
            padding: 1.5rem;
            text-align: center;
        }

        .cart-elegant-body {
            padding: 1rem;
            background-color: #fff;
            flex-grow: 1;
            overflow-y: auto;
        }

        .cart-elegant-item {
            display: grid;
            grid-template-columns: 60px 1fr auto;
            grid-template-rows: auto auto;
            gap: 0 1rem;
            padding-bottom: 1rem;
            margin-bottom: 1rem;
            border-bottom: 1px solid #e2e8f0;
        }

            .cart-elegant-item:last-child {
                border-bottom: none;
            }

        .cart-elegant-img {
            grid-row: 1 / 3;
            grid-column: 1 / 2;
            width: 60px;
            height: 60px;
            object-fit: contain;
            background-color: #f7fafc;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
        }

        .cart-elegant-name {
            grid-row: 1 / 2;
            grid-column: 2 / 3;
            font-weight: 700;
            align-self: center;
        }

        .cart-elegant-price {
            grid-row: 1 / 2;
            grid-column: 3 / 4;
            font-weight: 700;
            align-self: center;
        }

        .cart-elegant-controls {
            grid-row: 2 / 3;
            grid-column: 2 / 4;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .cart-elegant-qty {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

            .cart-elegant-qty button {
                background: none;
                border: 1px solid #ccc;
                width: 24px;
                height: 24px;
                display: grid;
                place-items: center;
                cursor: pointer;
                border-radius: 50%;
            }

        .cart-remove-btn {
            background: none;
            border: none;
            font-size: 1.2rem;
            cursor: pointer;
            color: #718096;
        }

        .cart-elegant-footer {
            padding: 1.5rem;
            background-color: #fff;
            border-top: 1px solid #e2e8f0;
            flex-shrink: 0;
        }

            .cart-elegant-footer .subtotal-row {
                display: flex;
                justify-content: space-between;
                margin-bottom: 1.5rem;
                font-size: 1.2rem;
                font-weight: 600;
            }

        .view-cart-link {
            display: block;
            text-align: center;
            color: #2d3748;
            text-transform: uppercase;
            font-size: 0.8rem;
            margin-bottom: 0.5rem;
            letter-spacing: 1px;
        }

        .checkout-btn-elegant {
            background-color: #2d3748;
            color: #fff;
            border: none;
            padding: 1rem;
            font-weight: 700;
            width: 100%;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .clear-cart-btn-elegant {
            background: none;
            border: none;
            color: #718096;
            text-decoration: underline;
            font-size: 0.8rem;
            text-align: center;
            width: 100%;
            margin-top: 0.75rem;
        }
    </style>
    <script>
        const pageSize = 10; let currentPage = 1; let allMedicineItems = [];
        let cart = []; let currentSourceId = null; let currentSourceName = null;

        document.addEventListener('DOMContentLoaded', function () {
            var offcanvasElementList = [].slice.call(document.querySelectorAll('.offcanvas'));
            var offcanvasList = offcanvasElementList.map(function (offcanvasEl) { return new bootstrap.Offcanvas(offcanvasEl) });

            const tableBody = document.getElementById('medicines-table-body');
            if (tableBody) {
                const medicines = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AvailableMedicines));
                const tableBodyHtml = medicines.map(medicine => `
                    <tr class="hover:bg-gray-50 medicine-item-row" data-inventory-id="${medicine.InventoryId}">
                        <td class="p-4"><input class="form-checkbox h-5 w-5 text-blue-600 rounded item-checkbox" type="checkbox"/></td>
                        <td class="p-4"><div class="w-16 h-16 bg-gray-200 rounded-md flex items-center justify-center"><img src="/images/icon_jar_can_box.png" class="w-12 h-12 object-contain" alt="${medicine.GenericName}"></div></td>
                        <td class="p-4"><div class="font-medium text-gray-800">${medicine.BrandName}</div><div class="text-sm text-gray-500">${medicine.GenericName}<br>${medicine.Strength}</div></td>
                        <td class="p-4"><span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">${medicine.PharmacyName}</span></td>
                        <td class="p-4">${medicine.StockQuantity > 0 ? `<span class="flex items-center text-green-600"><i class="fas fa-check-circle mr-1"></i><span>In Stock (${medicine.StockQuantity})</span></span>` : `<span class="flex items-center text-red-600"><i class="fas fa-times-circle mr-1"></i><span>Out of Stock</span></span>`}</td>
                        <td class="p-4 text-gray-800 font-medium">${medicine.Price.toFixed(2)} EGP</td>
                        <td class="p-4">
                            <div id="add-to-cart-controls-${medicine.InventoryId}" class="add-to-cart-controls flex items-center space-x-2"
                                 data-inventory-id="${medicine.InventoryId}" data-medicine-name="${medicine.GenericName}"
                                 data-brand-name="${medicine.BrandName || ''}" data-pharmacy-name="${medicine.PharmacyName}"
                                 data-price="${medicine.Price.toFixed(2)}" data-pharmacy-id="${medicine.PharmacyId}" data-stock-quantity="${medicine.StockQuantity}">
                                <input class="w-16 border border-gray-300 rounded-md px-2 py-1 text-center" type="number" value="1" min="1" />
                                <button class="bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-gray-700 text-sm whitespace-nowrap" type="button" onclick="handleAddToCartClick(this)">Add to Cart</button>
                            </div>
                        </td>
                    </tr>
                `).join('');
                tableBody.innerHTML = tableBodyHtml;

                allMedicineItems = Array.from(tableBody.querySelectorAll('.medicine-item-row'));
                setupPagination(); displayPage(currentPage);
                document.getElementById('selectAllCheckbox').addEventListener('change', function(e) {
                    allMedicineItems.forEach(row => { row.querySelector('.item-checkbox').checked = e.target.checked; });
                });
            }
        });

        function displayPage(page) {
            const start = (page - 1) * pageSize; const end = start + pageSize;
            allMedicineItems.forEach((item, index) => { item.style.display = (index >= start && index < end) ? 'table-row' : 'none'; });
        }

        function createPageButton(content, pageNumber, isDisabled = false, isActive = false) {
            const button = document.createElement('button'); button.innerHTML = content;
            let classes = 'p-2 rounded-md hover:bg-gray-200 flex items-center justify-center min-w-[36px]';
            if (isActive) { classes = 'px-4 py-2 bg-blue-500 text-white rounded-md'; }
            if (isDisabled) { classes += ' opacity-50 cursor-not-allowed'; }
            button.className = classes;
            if (!isDisabled && pageNumber) { button.onclick = (e) => { e.preventDefault(); currentPage = pageNumber; displayPage(currentPage); setupPagination(); }; }
            return button;
        }

        function setupPagination() {
            const totalItems = allMedicineItems.length; const totalPages = Math.ceil(totalItems / pageSize);
            const paginationContainer = document.getElementById('pagination-container');
            if (!paginationContainer) return; paginationContainer.innerHTML = ''; if (totalPages <= 1) return;
            const wrapper = document.createElement('div'); wrapper.className = 'flex items-center space-x-2';
            wrapper.appendChild(createPageButton('<i class="fas fa-chevron-left"></i>', currentPage - 1, currentPage === 1));
            for(let i = 1; i <= totalPages; i++){
                 if (i === currentPage) { wrapper.appendChild(createPageButton(i, i, false, true)); }
                 else { wrapper.appendChild(createPageButton(i, i, false, false)); }
            }
            wrapper.appendChild(createPageButton('<i class="fas fa-chevron-right"></i>', currentPage + 1, currentPage >= totalPages));
            paginationContainer.appendChild(wrapper);
        }

        function handleAddToCartClick(buttonElement) {
            const controlsDiv = buttonElement.closest('.add-to-cart-controls');
            const quantityInput = controlsDiv.querySelector('input[type="number"]');
            const quantity = parseInt(quantityInput.value);
            if (isNaN(quantity) || quantity < 1) { quantityInput.value = 1; return; }
            const dataset = controlsDiv.dataset;
            addToCart(parseInt(dataset.inventoryId), dataset.medicineName, dataset.brandName, dataset.pharmacyName, parseFloat(dataset.price), dataset.pharmacyId, parseInt(dataset.stockQuantity), quantity);
        }

        function addToCart(inventoryId, medicineName, brandName, pharmacyName, price, pharmacyId, stockQuantity, quantityToAdd = 1) {
            if (currentSourceId && currentSourceId !== pharmacyId) {
                if (!confirm(`You can only order from one pharmacy at a time. Clear cart and start a new order?`)) { return; }
                clearCart();
            }
            currentSourceId = pharmacyId; currentSourceName = pharmacyName;
            const existingItem = cart.find(item => item.inventoryId === inventoryId);
            const totalQuantity = (existingItem ? existingItem.quantity : 0) + quantityToAdd;
            if (totalQuantity > stockQuantity) { alert(`Maximum available quantity for ${brandName || medicineName} is ${stockQuantity}.`); return; }
            if (existingItem) { existingItem.quantity += quantityToAdd; }
            else { cart.push({ inventoryId, medicineName, brandName, price, quantity: quantityToAdd, pharmacyId, pharmacyName, stockQuantity }); }
            updateCartDisplay();
        }

        function addSelectedToCart() {
            document.querySelectorAll('#medicines-table-body .item-checkbox:checked').forEach(cb => {
                handleAddToCartClick(cb.closest('tr').querySelector('.add-to-cart-controls button'));
            });
        }

        function addAllToCart() {
            allMedicineItems.forEach(row => {
                handleAddToCartClick(row.querySelector('.add-to-cart-controls button'));
            });
        }

        function changeQuantity(inventoryId, change) {
            const itemIndex = cart.findIndex(item => item.inventoryId === inventoryId);
            if (itemIndex > -1) {
                const item = cart[itemIndex]; const newQuantity = item.quantity + change;
                if (newQuantity <= 0) { removeFromCartById(inventoryId); return; }
                if (newQuantity > item.stockQuantity) { return; }
                item.quantity = newQuantity; updateCartDisplay();
            }
        }

        function removeFromCartById(inventoryId) {
            const itemIndex = cart.findIndex(item => item.inventoryId === inventoryId);
            if (itemIndex > -1) {
                cart.splice(itemIndex, 1);
                if (cart.length === 0) { currentSourceId = null; currentSourceName = null; }
                updateCartDisplay();
            }
        }

        function updateCartDisplay() {
            const floatingBtn = document.getElementById('floating-cart-button');
            const itemCountSpan = document.getElementById('cart-item-count');
            const offcanvasItemsDiv = document.getElementById('offcanvas-cart-items');
            const offcanvasFooter = document.getElementById('offcanvas-cart-footer');
            const offcanvasTotalSpan = document.getElementById('offcanvas-cart-total');

            if (cart.length === 0) {
                itemCountSpan.textContent = '0'; // <-- BUG FIX IS HERE
                floatingBtn.classList.add('d-none');
                offcanvasItemsDiv.innerHTML = `<div class="text-center empty-cart-message"><p>Your cart is currently empty.</p></div>`;
                offcanvasFooter.style.display = 'none';
                return;
            }

            floatingBtn.classList.remove('d-none');
            offcanvasFooter.style.display = 'block';
            offcanvasItemsDiv.innerHTML = '';
            let total = 0;
            let totalItems = 0;

            cart.forEach(item => {
                const itemTotal = item.price * item.quantity;
                total += itemTotal;
                totalItems += item.quantity;
                offcanvasItemsDiv.innerHTML += `
                    <div class="cart-elegant-item">
                        <img src="/images/icon_jar_can_box.png" class="cart-elegant-img" alt="${item.medicineName}">
                        <span class="cart-elegant-name">${item.brandName || item.medicineName}</span>
                        <span class="cart-elegant-price">${itemTotal.toFixed(2)} EGP</span>
                        <div class="cart-elegant-controls">
                             <div class="cart-elegant-qty">
                                <span>Qty:</span>
                                <button onclick="changeQuantity(${item.inventoryId}, 1)">+</button>
                                <span>${item.quantity}</span>
                                <button onclick="changeQuantity(${item.inventoryId}, -1)">-</button>
                            </div>
                            <button class="cart-remove-btn" onclick="removeFromCartById(${item.inventoryId})">&times;</button>
                        </div>
                    </div>`;
            });
            offcanvasTotalSpan.textContent = `${total.toFixed(2)} EGP`;
            itemCountSpan.textContent = totalItems;
        }

        function clearCart() {
            cart = [];
            currentSourceId = null;
            currentSourceName = null;
            updateCartDisplay();
        }

        function proceedToOrder() {
            if (cart.length === 0) { return; }
            document.getElementById('pharmacy-id').value = currentSourceId;
            document.querySelector('#pharmacy-name').value = currentSourceName;
            let summaryHtml = `<div class="alert alert-light small"><strong>Source:</strong> ${currentSourceName}</div><ul class="list-group list-group-flush">`;
            let total = 0;
            cart.forEach((item) => {
                const itemTotal = item.price * item.quantity; total += itemTotal;
                summaryHtml += `<li class="list-group-item d-flex justify-content-between small p-2"><div><div class="fw-bold">${item.brandName||item.medicineName}</div><small class="text-muted">${item.quantity} x ${item.price.toFixed(2)}</small></div><span>${itemTotal.toFixed(2)}</span></li>`;
            });
            summaryHtml += `<li class="list-group-item d-flex justify-content-between bg-light p-2"><strong class="fw-bold">Total:</strong><strong class="fw-bold text-primary">${total.toFixed(2)} EGP</strong></li></ul>`;
            document.getElementById('order-summary').innerHTML = summaryHtml;
            let hiddenItemsHtml = '';
            cart.forEach((item, index) => {
                hiddenItemsHtml += `<input type="hidden" name="OrderItems[${index}].InventoryId" value="${item.inventoryId}"/><input type="hidden" name="OrderItems[${index}].UnitPrice" value="${item.price}"/><input type="hidden" name="OrderItems[${index}].Quantity" value="${item.quantity}"/>`;
            });
            document.getElementById('hidden-items').innerHTML = hiddenItemsHtml;
            var orderModal = new bootstrap.Modal(document.getElementById('orderModal'));
            orderModal.show();
        }
    </script>
}