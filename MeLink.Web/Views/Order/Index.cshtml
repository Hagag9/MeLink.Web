@model MeLink.Web.ViewModels.OrderSearchViewModel
@{
    ViewData["Title"] = "Order Medicines";
}

<div class="container py-5">
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card shadow-lg border-0 rounded-4">
        <div class="card-body p-md-5">
            <div class="text-center mb-5">
                <div class="icon-circle bg-primary-subtle text-primary mx-auto mb-3">
                    <i class="fas fa-pills fa-2x"></i>
                </div>
                <h3 class="display-6 fw-bold text-dark">Order Medicines</h3>
                <p class="text-muted lead-sm">Find and order the medicines you need from our partners.</p>
            </div>

            <div class="mb-4">
                <form asp-controller="Order"
                      asp-action="@(string.IsNullOrEmpty(Model.SupplierId) || ViewBag.IsPatient ? "Index" : "BrowseMedicines")"
                      method="get" class="d-flex flex-column flex-md-row gap-3">
                    @if (!string.IsNullOrEmpty(Model.SupplierId))
                    {
                        <input type="hidden" name="supplierId" value="@Model.SupplierId" />
                    }
                    <div class="input-group input-group-lg flex-grow-1">
                        <span class="input-group-text bg-white border-end-0 text-muted"><i class="fas fa-search"></i></span>
                        <input type="text" name="searchTerm" class="form-control border-start-0"
                               placeholder="Search by name or active ingredient..." value="@Model.SearchTerm">
                    </div>
                    <button type="submit" class="btn btn-primary btn-lg px-4">Search</button>
                </form>
            </div>

            @if (Model.AvailableMedicines.Any())
            {
                <h4 class="mb-3 text-dark fw-bold">
                    Available Medicines
                    <span class="badge bg-primary-subtle text-primary ms-2" id="total-medicines">@Model.AvailableMedicines.Count</span>
                </h4>

                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-5 row-cols-lg-5 g-3" id="medicines-grid">
                    @foreach (var medicine in Model.AvailableMedicines)
                    {
                        <div class="col medicine-item-col" data-inventory-id="@medicine.InventoryId">
                            <div class="card h-100 shadow-sm medicine-card">
                                <div class="supplier-label">@medicine.PharmacyName</div>
                                <div class="card-img-top-wrapper p-3">
                                    <img src="~/images/icon_jar_can_box.png" class="img-fluid rounded-3 mb-2" alt="@medicine.GenericName">
                                </div>
                                <div class="card-body d-flex flex-column pt-0 pb-3 px-3">
                                    <h6 class="card-title fw-bold text-dark mb-1 mt-2">@medicine.BrandName</h6>

                                    <p class="card-subtitle mb-2 text-muted small">(@medicine.GenericName) <span class="text-info">@medicine.DosageForm - @medicine.Strength</span></p>



                                    <div class="d-flex justify-content-between align-items-baseline mb-1 mt-auto ">
                                        <span class="badge bg-info-subtle text-info small fw-normal">@medicine.StockQuantity units</span>
                                        <span class="small fw-bold ">@medicine.Price.ToString("N2") EGP</span>
                                    </div>

                                    <div id="add-to-cart-controls-@medicine.InventoryId" class="add-to-cart-controls"
                                         data-inventory-id="@medicine.InventoryId"
                                         data-medicine-name="@medicine.GenericName"
                                         data-brand-name="@(medicine.BrandName ?? "")"
                                         data-pharmacy-name="@medicine.PharmacyName"
                                         data-price="@medicine.Price.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)"
                                         data-pharmacy-id="@medicine.PharmacyId"
                                         data-stock-quantity="@medicine.StockQuantity">

                                        <button class="btn btn-light w-100 fw-bold text-primary" type="button" onclick="handleAddToCartClick(this)">
                                            Add +
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <nav aria-label="Page navigation" class="mt-4" id="pagination-container">
                    <ul class="pagination justify-content-center"></ul>
                </nav>
            }
            else if (!string.IsNullOrEmpty(Model.SearchTerm))
            {
                <div class="alert alert-warning text-center rounded-3 p-4">
                    <h5 class="alert-heading"><i class="fas fa-exclamation-triangle me-2"></i> No Results Found</h5>
                    <p class="mb-0">We couldn't find any medicines containing "<strong>@Model.SearchTerm</strong>". Please try a different search term.</p>
                </div>
            }
            else
            {
                <div class="alert alert-info text-center rounded-3 p-4">
                    <h5 class="alert-heading"><i class="fas fa-info-circle me-2"></i> Ready to Find Your Medicine?</h5>
                    <p class="mb-0">Use the search bar above to quickly find the medicines you need from our wide network of pharmacies.</p>
                </div>
            }
        </div>
    </div>

    <div id="cart" class="card shadow-lg border-0 rounded-4 mt-5" style="display: none;">
        <div class="card-header bg-success text-white d-flex justify-content-between align-items-center rounded-top-4">
            <h5 class="mb-0"><i class="fas fa-shopping-cart me-2"></i> Shopping Cart</h5>
            <button type="button" class="btn btn-sm btn-light" onclick="clearCart()">
                <i class="fas fa-trash me-1"></i> Clear Cart
            </button>
        </div>
        <div class="card-body">
            <div id="cart-items"></div>
            <hr class="my-3">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <strong class="text-dark">Total: <span id="cart-total" class="text-success fs-5">0.00</span> EGP</strong>
                </div>
                <div>
                    <button type="button" class="btn btn-success btn-lg" onclick="proceedToOrder()">
                        <i class="fas fa-shopping-bag me-1"></i> Proceed to Order
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="orderModal" tabindex="-1">
    <div class="modal-dialog modal-md modal-dialog-centered">
        <div class="modal-content rounded-4 shadow-lg">
            <div class="modal-header bg-primary text-white rounded-top-4">
                <h5 class="modal-title">Confirm Order</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="orderForm" asp-action="ConfirmOrder" method="post" enctype="multipart/form-data">
                <div class="modal-body p-4">
                    <div id="order-summary"></div>
                    <hr>
                    @if (ViewBag.IsPatient)
                    {
                        <div class="mb-3">
                            <label class="form-label fw-semibold">Upload Prescription (Optional)</label>
                            <input type="file" class="form-control" name="PrescriptionFile" accept="image/*,.pdf">
                            <small class="form-text text-muted">You can upload an image of your prescription or PDF file.</small>
                        </div>
                    }
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Additional Notes</label>
                        <textarea class="form-control" name="Notes" rows="3" placeholder="Any notes or special instructions..."></textarea>
                    </div>
                    <input type="hidden" name="PatientId" value="">
                    <input type="hidden" name="PharmacyId" id="pharmacy-id">
                    <input type="hidden" name="PharmacyName" id="pharmacy-name">
                    <div id="hidden-items"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Confirm Order</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        const pageSize = 15;
        let currentPage = 1;
        let allMedicineItems = [];

        document.addEventListener('DOMContentLoaded', function() {
            const gridContainer = document.getElementById('medicines-grid');
            if (gridContainer) {
                allMedicineItems = Array.from(gridContainer.querySelectorAll('.medicine-item-col'));
                setupPagination();
                displayPage(currentPage);
            }
        });

        function displayPage(page) {
            const start = (page - 1) * pageSize;
            const end = start + pageSize;
            allMedicineItems.forEach((item, index) => {
                item.style.display = (index >= start && index < end) ? 'block' : 'none';
            });
        }

        function setupPagination() {
            const totalItems = allMedicineItems.length;
            const totalPages = Math.ceil(totalItems / pageSize);
            const paginationContainer = document.querySelector('#pagination-container ul');
            if (!paginationContainer) return;

            paginationContainer.innerHTML = '';

            if (totalPages <= 1) {
                paginationContainer.parentElement.style.display = 'none';
                return;
            }
            paginationContainer.parentElement.style.display = 'block';

            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" aria-label="Previous"><span aria-hidden="true">&laquo;</span></a>`;
            prevLi.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    displayPage(currentPage);
                    updatePaginationUI();
                }
            });
            paginationContainer.appendChild(prevLi);

            for (let i = 1; i <= totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                pageLi.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentPage = i;
                    displayPage(currentPage);
                    updatePaginationUI();
                });
                paginationContainer.appendChild(pageLi);
            }

            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage >= totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" aria-label="Next"><span aria-hidden="true">&raquo;</span></a>`;
            nextLi.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage < totalPages) {
                    currentPage++;
                    displayPage(currentPage);
                    updatePaginationUI();
                }
            });
            paginationContainer.appendChild(nextLi);
        }

        function updatePaginationUI() {
             const totalPages = Math.ceil(allMedicineItems.length / pageSize);
             const paginationLinks = document.querySelectorAll('#pagination-container .page-item');
             paginationLinks.forEach((li, index) => {
                 if (index === 0) {
                     li.classList.toggle('disabled', currentPage === 1);
                 } else if (index === paginationLinks.length - 1) {
                     li.classList.toggle('disabled', currentPage >= totalPages);
                 } else {
                     li.classList.toggle('active', index === currentPage);
                 }
             });
        }

        let cart = [];
        let currentSourceId = null;
        let currentSourceName = null;

        function handleAddToCartClick(buttonElement) {
            try {
                const controlsDiv = buttonElement.parentElement;
                const dataset = controlsDiv.dataset;

                if (!dataset.inventoryId || !dataset.price) {
                    console.error("Critical product data is missing.", dataset);
                    return;
                }

                addToCart(
                    parseInt(dataset.inventoryId),
                    dataset.medicineName,
                    dataset.brandName,
                    dataset.pharmacyName,
                    parseFloat(dataset.price),
                    dataset.pharmacyId,
                    parseInt(dataset.stockQuantity)
                );
            } catch (error) {
                console.error("Error in handleAddToCartClick:", error);
                showNotification("An error occurred. Please try again.", "danger");
            }
        }

        function updateCardControls(inventoryId) {
            const controlsDiv = document.getElementById(`add-to-cart-controls-${inventoryId}`);
            if (!controlsDiv) return;

            const existingItem = cart.find(item => item.inventoryId == inventoryId);
            const stockQuantity = parseInt(controlsDiv.dataset.stockQuantity);

            if (existingItem) {
                controlsDiv.innerHTML = `
                    <div class="input-group quantity-control">
                        <button class="btn btn-outline-primary" type="button" onclick="changeQuantity(${inventoryId}, -1, ${stockQuantity})"><i class="fas fa-minus"></i></button>
                        <input type="number" class="form-control text-center quantity-input" value="${existingItem.quantity}" min="1" max="${stockQuantity}" readonly>
                        <button class="btn btn-outline-primary" type="button" onclick="changeQuantity(${inventoryId}, 1, ${stockQuantity})"><i class="fas fa-plus"></i></button>
                        <button class="btn btn-outline-danger ms-2" type="button" onclick="removeFromCartById(${inventoryId})"><i class="fas fa-trash"></i></button>
                    </div>`;
            } else {
                controlsDiv.innerHTML = `
                    <button class="btn btn-light text-primary fw-bold w-100" type="button" onclick="handleAddToCartClick(this)">
                        Add +
                    </button>
                `;
            }
        }

        function addToCart(inventoryId, medicineName, brandName, pharmacyName, price, pharmacyId, stockQuantity) {
            if (currentSourceId && currentSourceId !== pharmacyId) {
                if (!confirm(`You cannot order from different sources in the same order (${currentSourceName}). Do you want to clear the cart and start over?`)) {
                    return;
                }
                clearCart();
            }
            currentSourceId = pharmacyId;
            currentSourceName = pharmacyName;
            const existingItem = cart.find(item => item.inventoryId === inventoryId);
            if (existingItem) {
                if (existingItem.quantity < stockQuantity) {
                    existingItem.quantity += 1;
                } else {
                    showNotification(`The maximum available quantity for ${medicineName} is ${stockQuantity} units.`, 'warning');
                    return;
                }
            } else {
                cart.push({ inventoryId, medicineName, brandName, price, quantity: 1, pharmacyId, pharmacyName, stockQuantity });
            }
            updateCartDisplay();
            updateCardControls(inventoryId);
            showNotification('Medicine added to cart', 'success');
        }

        function changeQuantity(inventoryId, change, stockQuantity) {
            const itemIndex = cart.findIndex(item => item.inventoryId === inventoryId);
            if (itemIndex > -1) {
                const item = cart[itemIndex];
                const newQuantity = item.quantity + change;
                if (newQuantity <= 0) {
                    removeFromCartById(inventoryId);
                    return;
                }
                if (newQuantity > stockQuantity) {
                    showNotification(`The maximum available quantity for ${item.medicineName} is ${stockQuantity} units.`, 'warning');
                    return;
                }
                item.quantity = newQuantity;
                updateCartDisplay();
                updateCardControls(inventoryId);
            }
        }

        function removeFromCartById(inventoryId) {
            const itemIndex = cart.findIndex(item => item.inventoryId === inventoryId);
            if (itemIndex > -1) {
                const removedItem = cart.splice(itemIndex, 1)[0];
                showNotification(`${removedItem.medicineName} has been removed from the cart.`, 'info');
            }
            if (cart.length === 0) {
                currentSourceId = null;
                currentSourceName = null;
            }
            updateCartDisplay();
            updateCardControls(inventoryId);
        }

        function updateCartDisplay() {
            const cartDiv = document.getElementById('cart');
            const cartItemsDiv = document.getElementById('cart-items');
            const cartTotalSpan = document.getElementById('cart-total');
            if (!cartDiv || !cartItemsDiv || !cartTotalSpan) return;

            if (cart.length === 0) {
                cartDiv.style.display = 'none';
                return;
            }

            cartDiv.style.display = 'block';
            let html = `<div class="mb-3 alert alert-secondary p-2 rounded"><strong>Source: ${currentSourceName}</strong></div>`;
            let total = 0;
            cart.forEach((item) => {
                const itemTotal = item.price * item.quantity;
                total += itemTotal;
                html += `
                    <div class="d-flex align-items-center justify-content-between p-3 mb-2 bg-light rounded-3">
                        <div class="flex-grow-1">
                            <div class="fw-bold">${item.medicineName}</div>
                            ${item.brandName ? `<div class="text-muted small">(${item.brandName})</div>` : ''}
                        </div>
                        <div class="text-center mx-3 flex-shrink-0">
                            <div class="fw-bold">${item.quantity} × ${item.price.toFixed(2)} EGP</div>
                            <div class="text-muted small">Subtotal: ${itemTotal.toFixed(2)} EGP</div>
                        </div>
                        <div><button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFromCartById(${item.inventoryId})"><i class="fas fa-times"></i></button></div>
                    </div>`;
            });
            cartItemsDiv.innerHTML = html;
            cartTotalSpan.textContent = total.toFixed(2);
        }

        function clearCart() {
            cart.forEach(item => {
                updateCardControls(item.inventoryId);
            });
            cart = [];
            currentSourceId = null;
            currentSourceName = null;
            updateCartDisplay();
            showNotification('Shopping cart cleared', 'info');
        }

        function proceedToOrder() {
            if (cart.length === 0) {
                showNotification('Cart is empty', 'warning');
                return;
            }
            document.getElementById('pharmacy-id').value = currentSourceId;
            document.querySelector('#pharmacy-name').value = currentSourceName;
            let summaryHtml = `<div class="alert alert-primary"><strong>Source:</strong> ${currentSourceName}<br><strong>Number of Items:</strong> ${cart.length}</div><ul class="list-group list-group-flush">`;
            let total = 0;
            cart.forEach((item) => {
                const itemTotal = item.price * item.quantity;
                total += itemTotal;
                summaryHtml += `<li class="list-group-item d-flex justify-content-between align-items-center"><div><div class="fw-bold">${item.medicineName}</div><div class="text-muted small">${item.quantity} x ${item.price.toFixed(2)} EGP</div></div><span class="fw-bold text-primary">${itemTotal.toFixed(2)} EGP</span></li>`;
            });
            summaryHtml += `<li class="list-group-item d-flex justify-content-between align-items-center bg-light"><strong class="fs-5">Total:</strong><strong class="fs-5 text-success">${total.toFixed(2)} EGP</strong></li></ul>`;
            document.getElementById('order-summary').innerHTML = summaryHtml;
            let hiddenItemsHtml = '';
            cart.forEach((item, index) => {
                hiddenItemsHtml += `<input type="hidden" name="OrderItems[${index}].InventoryId" value="${item.inventoryId}"><input type="hidden" name="OrderItems[${index}].MedicineName" value="${item.medicineName}"><input type="hidden" name="OrderItems[${index}].BrandName" value="${item.brandName || ''}"><input type="hidden" name="OrderItems[${index}].UnitPrice" value="${item.price}"><input type="hidden" name="OrderItems[${index}].Quantity" value="${item.quantity}">`;
            });
            document.getElementById('hidden-items').innerHTML = hiddenItemsHtml;
            new bootstrap.Modal(document.getElementById('orderModal')).show();
        }

        function showNotification(message, type) {
            const wrapper = document.createElement('div');
            wrapper.innerHTML = [
                `<div class="alert alert-${type} alert-dismissible fade show" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 2000; min-width: 250px;">`,
                `   <div>${message}</div>`,
                '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
                '</div>'
            ].join('');
            document.body.append(wrapper);
            setTimeout(() => {
                const alertElement = wrapper.querySelector('.alert');
                if (alertElement) {
                    const bsAlert = bootstrap.Alert.getInstance(alertElement) || new bootstrap.Alert(alertElement);
                    if (bsAlert) bsAlert.close();
                }
                if (wrapper) wrapper.remove();
            }, 3000);
        }
    </script>

    <style>
        .card {
            border: none;
            overflow: hidden;
        }

        .rounded-4 {
            border-radius: 1.5rem !important;
        }

        .rounded-top-4 {
            border-top-left-radius: 1.5rem !important;
            border-top-right-radius: 1.5rem !important;
        }

        .shadow-lg {
            box-shadow: 0 1rem 3rem rgba(0,0,0,.175) !important;
        }

        .icon-circle {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .lead-sm {
            font-size: 1.15rem;
        }

        .bg-primary-subtle {
            background-color: #e0f2fe !important;
        }

        .bg-info-subtle {
            background-color: #cff4fc !important;
        }

        .bg-success-subtle {
            background-color: #d1e7dd !important;
        }

        .input-group-text {
            border-radius: .75rem 0 0 .75rem !important;
        }

        .input-group-lg .form-control {
            border-radius: 0 .75rem .75rem 0 !important;
        }

        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25) !important;
        }

        .btn {
            border-radius: .75rem;
        }

        .medicine-card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
            border: 1px solid #e9ecef;
            border-radius: 0.75rem;
            position: relative;
            min-width: 208px;
            min-height: 268px;
        }

            .medicine-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 .5rem 1rem rgba(0,0,0,.15) !important;
            }

        .card-img-top-wrapper {
            background-color: #f8f9fa;
            border-bottom: 1px solid #eee;
            padding-bottom: 0.5rem !important;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100px;
        }

            .card-img-top-wrapper img {
                max-height: 100px;
                width: auto;
                object-fit: contain;
                border-radius: 0.5rem;
            }

        .medicine-card .card-body {
            padding-top: 0.75rem;
            padding-bottom: 0.75rem;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .medicine-card .card-title {
            font-size: 1rem;
            line-height: 1.3;
        }

        .medicine-card .card-subtitle,
        .medicine-card .text-info.small {
            font-size: 0.8rem;
        }

        .quantity-control .btn {
            border-radius: 0.5rem;
            font-size: 0.9rem;
            padding: 0.375rem 0.75rem;
        }

        .quantity-control .quantity-input {
            border-left: none;
            border-right: none;
            font-size: 0.9rem;
            height: auto;
            padding: 0.375rem 0.25rem;
            background-color: #fff;
            border-color: #ced4da;
        }

            .quantity-control .quantity-input:focus {
                box-shadow: none;
                border-color: #ced4da;
            }

        .quantity-control .btn-outline-danger {
            border-radius: 0.5rem;
        }

        .medicine-item-col {
            display: block;
        }

        .supplier-label {
            position: absolute;
            top: 0;
            right: 0;
            background-color: #86b7feab;
            color: white;
            padding: 5px 15px;
            font-size: 0.75rem;
            font-weight: 600;
            border-radius: 0 0 0 8px;
            z-index: 2;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

    </style>
}