@model MeLink.Web.ViewModels.OrderSearchViewModel
@{
    ViewData["Title"] = "Order Medicines";
}

<div class="container py-5">
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card shadow-lg border-0 rounded-4">
        <div class="card-body p-md-5">
            <div class="text-center mb-5">
                <div class="icon-circle bg-primary-subtle text-primary mx-auto mb-3">
                    <i class="fas fa-pills fa-2x"></i>
                </div>
                <h3 class="display-6 fw-bold text-dark">Order Medicines</h3>
                <p class="text-muted lead-sm">Find and order the medicines you need from our partners.</p>
            </div>

            <div class="mb-4">
                <form asp-controller="Order"
                      asp-action="@(string.IsNullOrEmpty(Model.SupplierId) || ViewBag.IsPatient ? "Index" : "BrowseMedicines")"
                      method="get" class="d-flex flex-column flex-md-row gap-3">
                    @if (!string.IsNullOrEmpty(Model.SupplierId))
                    {
                        <input type="hidden" name="supplierId" value="@Model.SupplierId" />
                    }
                    <div class="input-group input-group-lg flex-grow-1">
                        <span class="input-group-text bg-white border-end-0 text-muted"><i class="fas fa-search"></i></span>
                        <input type="text" name="searchTerm" class="form-control border-start-0"
                               placeholder="Search by name or active ingredient..." value="@Model.SearchTerm">
                    </div>
                    <button type="submit" class="btn btn-primary btn-lg px-4">Search</button>
                </form>
            </div>

            @if (Model.AvailableMedicines.Any())
            {
                <h4 class="mb-3 text-dark fw-bold">
                    Available Medicines
                    <span class="badge bg-primary-subtle text-primary ms-2" id="total-medicines">@Model.AvailableMedicines.Count</span>
                </h4>
                <div class="table-responsive rounded-4 border">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="bg-light">
                            <tr>
                                <th scope="col" class="col-4">Medicine</th>
                                <th scope="col" class="col-2">Source</th>
                                <th scope="col" class="col-2">Price</th>
                                <th scope="col" class="col-2">Available</th>
                                <th scope="col" class="col-2">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="medicine-table-body">
                            @foreach (var medicine in Model.AvailableMedicines)
                            {
                                <tr>
                                    <td>
                                        <div class="fw-bold">@medicine.GenericName</div>
                                        @if (!string.IsNullOrEmpty(medicine.BrandName))
                                        {
                                            <div class="text-muted small">(@medicine.BrandName)</div>
                                        }
                                        <div class="text-info small">@medicine.DosageForm - @medicine.Strength</div>
                                    </td>
                                    <td>
                                        <div class="fw-semibold">@medicine.PharmacyName</div>
                                        @if (!string.IsNullOrEmpty(medicine.PharmacyAddress))
                                        {
                                            <div class="text-muted small">@medicine.PharmacyAddress</div>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-success-subtle text-success fs-6 fw-normal">@medicine.Price.ToString("C")</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-info-subtle text-info fs-6 fw-normal">@medicine.StockQuantity units</span>
                                    </td>
                                    <td>
                                        <div class="input-group input-group-sm">
                                            <input type="number" class="form-control text-center" id="qty-@medicine.InventoryId"
                                                   value="1" min="1" max="@medicine.StockQuantity">
                                            <button class="btn btn-primary" type="button"
                                                    onclick="addToCart(@medicine.InventoryId, '@medicine.GenericName', '@medicine.BrandName', '@medicine.PharmacyName', @medicine.Price, '@medicine.PharmacyId')">
                                                <i class="fas fa-plus"></i> Add
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @* Pagination Controls *@
                <nav aria-label="Page navigation" class="mt-4" id="pagination-container">
                    <ul class="pagination justify-content-center">
                        <li class="page-item" id="previous-page">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item" id="next-page">
                            <a class="page-link" href="#" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            }
            else if (!string.IsNullOrEmpty(Model.SearchTerm))
            {
                <div class="alert alert-warning text-center rounded-3 p-4">
                    <h5 class="alert-heading"><i class="fas fa-exclamation-triangle me-2"></i> No Results Found</h5>
                    <p class="mb-0">We couldn't find any medicines containing "<strong>@Model.SearchTerm</strong>". Please try a different search term.</p>
                </div>
            }
            else
            {
                <div class="alert alert-info text-center rounded-3 p-4">
                    <h5 class="alert-heading"><i class="fas fa-info-circle me-2"></i> Ready to Find Your Medicine?</h5>
                    <p class="mb-0">Use the search bar above to quickly find the medicines you need from our wide network of pharmacies.</p>
                </div>
            }
        </div>
    </div>

    @* Cart & Modal remain unchanged *@
    <div id="cart" class="card shadow-lg border-0 rounded-4 mt-5" style="display: none;">
        <div class="card-header bg-success text-white d-flex justify-content-between align-items-center rounded-top-4">
            <h5 class="mb-0"><i class="fas fa-shopping-cart me-2"></i> Shopping Cart</h5>
            <button type="button" class="btn btn-sm btn-light" onclick="clearCart()">
                <i class="fas fa-trash me-1"></i> Clear Cart
            </button>
        </div>
        <div class="card-body">
            <div id="cart-items"></div>
            <hr class="my-3">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <strong class="text-dark">Total: <span id="cart-total" class="text-success fs-5">0.00</span> EGP</strong>
                </div>
                <div>
                    <button type="button" class="btn btn-success btn-lg" onclick="proceedToOrder()">
                        <i class="fas fa-shopping-bag me-1"></i> Proceed to Order
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="orderModal" tabindex="-1">
    <div class="modal-dialog modal-md modal-dialog-centered">
        <div class="modal-content rounded-4 shadow-lg">
            <div class="modal-header bg-primary text-white rounded-top-4">
                <h5 class="modal-title">Confirm Order</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="orderForm" asp-action="ConfirmOrder" method="post" enctype="multipart/form-data">
                <div class="modal-body p-4">
                    <div id="order-summary"></div>
                    <hr>
                    @if (ViewBag.IsPatient)
                    {
                        <div class="mb-3">
                            <label class="form-label fw-semibold">Upload Prescription (Optional)</label>
                            <input type="file" class="form-control" name="PrescriptionFile" accept="image/*,.pdf">
                            <small class="form-text text-muted">You can upload an image of your prescription or PDF file.</small>
                        </div>
                    }
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Additional Notes</label>
                        <textarea class="form-control" name="Notes" rows="3" placeholder="Any notes or special instructions..."></textarea>
                    </div>
                    <input type="hidden" name="PatientId" value="">
                    <input type="hidden" name="PharmacyId" id="pharmacy-id">
                    <input type="hidden" name="PharmacyName" id="pharmacy-name">
                    <div id="hidden-items"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Confirm Order</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Pagination variables
        const pageSize = 10;
        let currentPage = 1;
        let allMedicineRows = [];

        // Function to display medicines for the current page
        function displayPage(page) {
            const tableBody = document.getElementById('medicine-table-body');
            const start = (page - 1) * pageSize;
            const end = start + pageSize;
            const paginatedItems = allMedicineRows.slice(start, end);

            tableBody.innerHTML = ''; // Clear table
            paginatedItems.forEach(row => tableBody.appendChild(row));
        }

        // Function to setup pagination links
        function setupPagination() {
            const totalItems = allMedicineRows.length;
            const totalPages = Math.ceil(totalItems / pageSize);
            const paginationContainer = document.querySelector('#pagination-container ul');
            paginationContainer.innerHTML = ''; // Clear previous links

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" aria-label="Previous"><span aria-hidden="true">&laquo;</span></a>`;
            prevLi.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    displayPage(currentPage);
                    setupPagination();
                }
            });
            paginationContainer.appendChild(prevLi);

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                pageLi.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentPage = i;
                    displayPage(currentPage);
                    setupPagination();
                });
                paginationContainer.appendChild(pageLi);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage >= totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" aria-label="Next"><span aria-hidden="true">&raquo;</span></a>`;
            nextLi.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage < totalPages) {
                    currentPage++;
                    displayPage(currentPage);
                    setupPagination();
                }
            });
            paginationContainer.appendChild(nextLi);
        }

        // Main logic to run on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Get all medicine rows
            const tableBody = document.getElementById('medicine-table-body');
            allMedicineRows = Array.from(tableBody.querySelectorAll('tr'));

            if (allMedicineRows.length > pageSize) {
                // If more items than page size, set up pagination
                setupPagination();
                displayPage(currentPage);
            } else {
                // Otherwise, hide pagination controls
                document.getElementById('pagination-container').style.display = 'none';
            }
        });

        // --- Your existing JavaScript functions ---
        let cart = [];
        let currentSourceId = null;
        let currentSourceName = null;

        function addToCart(inventoryId, medicineName, brandName, sourceName, price, sourceId) {
            const quantity = parseInt(document.getElementById('qty-' + inventoryId).value);

            if (currentSourceId && currentSourceId !== sourceId) {
                if (!confirm('You cannot order from different sources in the same order. Do you want to clear the cart and start over?')) {
                    return;
                }
                clearCart();
            }

            currentSourceId = sourceId;
            currentSourceName = sourceName;

            const existingItem = cart.find(item => item.inventoryId === inventoryId);
            if (existingItem) {
                existingItem.quantity += quantity;
            } else {
                cart.push({
                    inventoryId: inventoryId,
                    medicineName: medicineName,
                    brandName: brandName,
                    price: price,
                    quantity: quantity
                });
            }

            updateCartDisplay();
            showNotification('Medicine added to cart', 'success');
        }

        function updateCartDisplay() {
            const cartDiv = document.getElementById('cart');
            const cartItemsDiv = document.getElementById('cart-items');
            const cartTotalSpan = document.getElementById('cart-total');

            if (cart.length === 0) {
                cartDiv.style.display = 'none';
                return;
            }

            cartDiv.style.display = 'block';

            let html = `<div class="mb-3 alert alert-secondary p-2 rounded"><strong>Source: ${currentSourceName}</strong></div>`;
            let total = 0;

            cart.forEach((item, index) => {
                const itemTotal = item.price * item.quantity;
                total += itemTotal;

                html += `
                    <div class="d-flex align-items-center justify-content-between p-3 mb-2 bg-light rounded-3">
                        <div class="flex-grow-1">
                            <div class="fw-bold">${item.medicineName}</div>
                            ${item.brandName ? `<div class="text-muted small">(${item.brandName})</div>` : ''}
                        </div>
                        <div class="text-center mx-3 flex-shrink-0">
                            <div class="fw-bold">${item.quantity} × ${item.price.toFixed(2)} EGP</div>
                            <div class="text-muted small">Subtotal: ${itemTotal.toFixed(2)} EGP</div>
                        </div>
                        <div>
                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFromCart(${index})">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                `;
            });

            cartItemsDiv.innerHTML = html;
            cartTotalSpan.textContent = total.toFixed(2);
        }

        function removeFromCart(index) {
            cart.splice(index, 1);
            if (cart.length === 0) {
                currentSourceId = null;
                currentSourceName = null;
            }
            updateCartDisplay();
        }

        function clearCart() {
            cart = [];
            currentSourceId = null;
            currentSourceName = null;
            updateCartDisplay();
        }

        function proceedToOrder() {
            if (cart.length === 0) {
                showNotification('Cart is empty', 'warning');
                return;
            }

            document.getElementById('pharmacy-id').value = currentSourceId;
            document.querySelector('#pharmacy-name').value = currentSourceName;

            let summaryHtml = `
                <div class="alert alert-primary">
                    <strong>Source:</strong> ${currentSourceName}<br>
                    <strong>Number of Items:</strong> ${cart.length}
                </div>
                <ul class="list-group list-group-flush">
            `;

            let total = 0;
            cart.forEach((item, index) => {
                const itemTotal = item.price * item.quantity;
                total += itemTotal;
                summaryHtml += `
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <div class="fw-bold">${item.medicineName}</div>
                            <div class="text-muted small">${item.quantity} x ${item.price.toFixed(2)} EGP</div>
                        </div>
                        <span class="fw-bold text-primary">${itemTotal.toFixed(2)} EGP</span>
                    </li>
                `;
            });

            summaryHtml += `
                <li class="list-group-item d-flex justify-content-between align-items-center bg-light">
                    <strong class="fs-5">Total:</strong>
                    <strong class="fs-5 text-success">${total.toFixed(2)} EGP</strong>
                </li>
            </ul>
            `;

            document.getElementById('order-summary').innerHTML = summaryHtml;

            let hiddenItemsHtml = '';
            cart.forEach((item, index) => {
                hiddenItemsHtml += `
                    <input type="hidden" name="OrderItems[${index}].InventoryId" value="${item.inventoryId}">
                    <input type="hidden" name="OrderItems[${index}].MedicineName" value="${item.medicineName}">
                    <input type="hidden" name="OrderItems[${index}].BrandName" value="${item.brandName || ''}">
                    <input type="hidden" name="OrderItems[${index}].UnitPrice" value="${item.price}">
                    <input type="hidden" name="OrderItems[${index}].Quantity" value="${item.quantity}">
                `;
            });
            document.getElementById('hidden-items').innerHTML = hiddenItemsHtml;

            new bootstrap.Modal(document.getElementById('orderModal')).show();
        }

        function showNotification(message, type) {
            const alertPlaceholder = document.querySelector('.container');
            const wrapper = document.createElement('div');
            wrapper.innerHTML = [
                `<div class="alert alert-${type} alert-dismissible fade show" role="alert">`,
                `   <div>${message}</div>`,
                '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
                '</div>'
            ].join('')

            alertPlaceholder.prepend(wrapper);

            setTimeout(() => {
                const alert = new bootstrap.Alert(wrapper.querySelector('.alert'));
                alert.close();
            }, 3000);
        }

        document.addEventListener('DOMContentLoaded', function() {
            const quantityInputs = document.querySelectorAll('input[type="number"]');
            quantityInputs.forEach(input => {
                input.addEventListener('change', function() {
                    if (this.value < 1) this.value = 1;
                    if (this.value > this.max) this.value = this.max;
                });
            });
        });
    </script>

    <style>
        .card {
            border: none;
        }

        .rounded-4 {
            border-radius: 1.5rem !important;
        }

        .rounded-top-4 {
            border-top-left-radius: 1.5rem !important;
            border-top-right-radius: 1.5rem !important;
        }

        .shadow-lg {
            box-shadow: 0 1rem 3rem rgba(0,0,0,.175) !important;
        }

        .icon-circle {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .lead-sm {
            font-size: 1.15rem;
        }

        .bg-primary-subtle {
            background-color: #e0f2fe !important;
        }

        .bg-info-subtle {
            background-color: #cff4fc !important;
        }

        .bg-success-subtle {
            background-color: #d1e7dd !important;
        }

        .input-group-text {
            border-radius: .75rem 0 0 .75rem !important;
        }

        .form-control {
            border-radius: 0 .75rem .75rem 0 !important;
        }

            .form-control:focus {
                box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25) !important;
            }

        .btn {
            border-radius: .75rem;
        }

        .table-responsive {
            border-radius: 1rem;
            overflow: hidden;
        }

        .table-hover tbody tr:hover {
            background-color: #f1f7fe;
        }

        .table thead th {
            font-weight: 600;
            color: #495057;
            text-transform: uppercase;
        }
    </style>
}